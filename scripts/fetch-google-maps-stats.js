#!/usr/bin/env node

/**
 * Pre-build script to fetch Google Maps statistics
 * Run this before building to ensure fresh stats are available
 */

import { writeFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { fetchGoogleMapsStatsWithScraping } from '../src/utils/googleMapsScraper.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const USER_ID = '100234331600740025841';

async function fetchAndCacheStats() {
  console.log('üîÑ Fetching Google Maps statistics...');
  
  try {
    const stats = await fetchGoogleMapsStatsWithScraping(USER_ID);
    
    console.log('üìä Stats fetched successfully:');
    console.log(`   Points: ${stats.totalPoints}`);
    console.log(`   Views: ${stats.totalViews}`);
    console.log(`   Photos: ${stats.totalPhotos}`);
    console.log(`   Reviews: ${stats.totalReviews}`);
    
    // Write stats to a JSON file that can be imported
    const statsPath = join(__dirname, '../src/data/google-maps-stats.json');
    writeFileSync(statsPath, JSON.stringify(stats, null, 2));
    
    console.log('‚úÖ Stats cached successfully!');
    
    // Also update the TypeScript file with fresh data
    const tsStatsPath = join(__dirname, '../src/utils/googleMapsCache.ts');
    const tsContent = `/**
 * Cached Google Maps statistics
 * Generated by scripts/fetch-google-maps-stats.js
 * Last updated: ${new Date().toISOString()}
 */

import type { GoogleMapsStats } from './googleMaps.js';

export const cachedGoogleMapsStats: Record<string, GoogleMapsStats> = {
  '${USER_ID}': ${JSON.stringify(stats, null, 4)}
};

export function getCachedStats(userId: string): GoogleMapsStats | null {
  return cachedGoogleMapsStats[userId] || null;
}
`;
    
    writeFileSync(tsStatsPath, tsContent);
    console.log('‚úÖ TypeScript cache updated!');
    
  } catch (error) {
    console.error('‚ùå Failed to fetch Google Maps stats:', error);
    process.exit(1);
  }
}

// Run if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  fetchAndCacheStats();
}
